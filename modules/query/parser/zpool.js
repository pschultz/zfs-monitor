// Generated by CoffeeScript 1.3.1
var Disk, Diskarray, PoolParser, Scan, diskArrayStartPattern, exports, poolScanPattern, poolStatusPattern;

poolStatusPattern = /^ state: (\S+)/;

poolScanPattern = /^  scan: (resilver|scrub) in progress/;

diskArrayStartPattern = /^\s+NAME/;

Scan = require('../../zpool/scan');

Disk = require('../../zpool/disk');

Diskarray = require('../../zpool/array');

PoolParser = (function() {

  PoolParser.name = 'PoolParser';

  function PoolParser(pool) {
    this.pool = pool;
    this.stripeIndex = 0;
  }

  PoolParser.prototype.parse = function(lines) {
    var i, line, nil, _i, _ref, _ref1;
    for (i = _i = 0, _ref = lines.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      line = lines[i];
      if (poolStatusPattern.test(line)) {
        _ref1 = poolStatusPattern.exec(line), nil = _ref1[0], this.pool.status = _ref1[1];
        continue;
      }
      if (poolScanPattern.test(line)) {
        i = this.parseScans(lines, i);
        continue;
      }
      if (diskArrayStartPattern.test(line)) {
        i = this.parseDiskarrays(lines, i + 2);
        continue;
      }
    }
    return this.pool;
  };

  PoolParser.prototype.parseScans = function(lines, i) {
    var eta, etaPattern, hours, line, minutes, nil, percent, progress, progressPattern, type, _ref, _ref1, _ref2;
    eta = 0;
    progress = 0;
    line = lines[i];
    _ref = poolScanPattern.exec(line), nil = _ref[0], type = _ref[1];
    line = lines[++i];
    etaPattern = /(\d+)h(\d)+m to go/;
    if (etaPattern.test(line)) {
      _ref1 = etaPattern.exec(line), nil = _ref1[0], hours = _ref1[1], minutes = _ref1[2];
      eta = hours * 3600 + minutes * 60;
    }
    line = lines[++i];
    progressPattern = /([\d.]+)% done/;
    if (progressPattern.test(line)) {
      _ref2 = progressPattern.exec(line), nil = _ref2[0], percent = _ref2[1];
      progress = percent / 100;
    }
    this.pool.addScan(new Scan(this.pool.name, type, progress, eta));
    return i;
  };

  PoolParser.prototype.parseDiskarrays = function(lines, i) {
    var deviceName, deviceStatus, deviceType, disk, diskArray, indentLevel, isSpecialDevice, lastIndentLevel, leadingSpaces, line, linePattern, nil, specialDeviceNamePattern, _i, _ref, _ref1, _ref2;
    linePattern = /^\s+(\S+)\s*(\S+)?/;
    specialDeviceNamePattern = /^((raidz\d|mirror|logs|spares|cache)\S*)/;
    lastIndentLevel = Infinity;
    diskArray = null;
    for (i = _i = i, _ref = lines.length - 1; i <= _ref ? _i <= _ref : _i >= _ref; i = i <= _ref ? ++_i : --_i) {
      line = lines[i];
      if (line.match(/^\s*$/)) {
        break;
      }
      leadingSpaces = /^\s+/.exec(line)[0];
      indentLevel = leadingSpaces.length;
      _ref1 = linePattern.exec(line), nil = _ref1[0], deviceName = _ref1[1], deviceStatus = _ref1[2];
      deviceType = 'striped';
      isSpecialDevice = specialDeviceNamePattern.test(deviceName);
      if (isSpecialDevice) {
        _ref2 = specialDeviceNamePattern.exec(deviceName), nil = _ref2[0], deviceName = _ref2[1], deviceType = _ref2[2];
        diskArray = this.addDiskarray(deviceName, deviceType, deviceStatus);
        lastIndentLevel = indentLevel;
        continue;
      }
      if (indentLevel < lastIndentLevel) {
        diskArray = this.addDiskarray(deviceName, deviceType, deviceStatus);
        lastIndentLevel = indentLevel;
        if (diskArray.type !== 'striped') {
          continue;
        }
      }
      disk = new Disk(deviceName, deviceStatus);
      diskArray.disks.push(disk);
      lastIndentLevel = indentLevel;
      continue;
    }
    return i;
  };

  PoolParser.prototype.addDiskarray = function(name, type, status) {
    var diskArray;
    if (status == null) {
      status = '';
    }
    name = type === 'striped' ? "striped-" + (this.stripeIndex++) : name;
    diskArray = new Diskarray(name, type, status);
    this.pool.addDiskarray(diskArray);
    return diskArray;
  };

  return PoolParser;

})();

module.exports = exports = PoolParser;
